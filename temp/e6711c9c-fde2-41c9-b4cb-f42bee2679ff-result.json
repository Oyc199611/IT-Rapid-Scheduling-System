{"name": "同步waf策略", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_waf.Test_waf_services object at 0x000001E3997EE410>\nread_cookie = {'Authorization': 'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhQGEuY29tIiwibmFtZSI6ImFkbWluIiwicmVtIjowLCJpZCI6IjEiLCJhdXR...aW9uIiwiZXhwIjoxNzAxMzkzOTA1fQ.laTuMWPdgwpq44GQ-jfeHJDMJrKiZEt92s8Ob4SlGifAV7GPxpNyL6sPLDLBmfpMn_GEzeti88uXszD-T6Pc1A'}\nbase_url = 'http://134.224.183.100'\n\n    @allure.title(\"同步waf策略\")\n    @allure.step('同步waf策略')\n    @pytest.mark.run(order=3)\n    def test03_synchronization_waf(self, read_cookie, base_url):\n        data = Waf_service().query_waf_strategy(read_cookie, base_url)\n        datas = json.loads(data.text)\n        if data.status_code == 200:\n            # 有策略数据再去同步数据（不改变数据的情况下）\n            if len(datas) != 0:\n                self.log.info('%s:%s' % (sys._getframe().f_code.co_name, '------用例场景：同步waf策略------'))\n                data = Waf_service().synchronization_waf(read_cookie, base_url)\n                if data.status_code == 200:\n                    self.log.info('%s:%s' % (sys._getframe().f_code.co_name, '同步waf策略成功'))\n                    assert data.status_code == 200\n                else:\n                    self.log.info('%s:%s' % (sys._getframe().f_code.co_name, '同步waf策略失败'))\n                    self.log.info('%s:%s' % (sys._getframe().f_code.co_name, '失败原因：%s' % json.loads(data.text)))\n>                   assert data.status_code == 200\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntestcase\\test_waf.py:101: AssertionError"}, "steps": [{"name": "同步waf策略", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"D:\\python\\location\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"D:\\pycharm\\PycharmProject\\IT Rapid Scheduling System\\testcase\\test_waf.py\", line 101, in test03_synchronization_waf\n    assert data.status_code == 200\n"}, "parameters": [{"name": "read_cookie", "value": "{'Authorization': 'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhQGEuY29tIiwibmFtZSI6ImFkbWluIiwicmVtIjowLCJpZCI6IjEiLCJhdXRoIjoiY3NjcC5yb2xlLmFkZCxjc2NwLnJvbGUuZWRpdCxjc2NwLmxvZ2dpbmcubG9naW4sY3NjcC5sb2dnaW5nLm9wZXJhdGlvbixjc2NwLnVzZXIuZGVsLGNzY3Aucm9sZS5kZWwsY3NjcC51c2VyLnF1ZXJ5LGNzY3AudXNlci5hZGQsY3NjcC51c2VyLmVkaXQsY3NjcC5yb2xlLGNzY3AubG9nZ2luZyxjc2NwLmxvZ2dpbmcub3BlcmF0aW9uIiwiZXhwIjoxNzAxMzkzOTA1fQ.laTuMWPdgwpq44GQ-jfeHJDMJrKiZEt92s8Ob4SlGifAV7GPxpNyL6sPLDLBmfpMn_GEzeti88uXszD-T6Pc1A'}"}, {"name": "base_url", "value": "'http://134.224.183.100'"}], "start": 1701313032201, "stop": 1701313032264}], "attachments": [{"name": "log", "source": "2a327039-2000-42bd-8876-1873f611402d-attachment.txt", "type": "text/plain"}], "start": 1701313032200, "stop": 1701313032265, "uuid": "c0a8c7fe-68a4-4a01-b762-9e270ca9b698", "historyId": "77370585a753d178df8e0e55db14738c", "testCaseId": "77370585a753d178df8e0e55db14738c", "fullName": "testcase.test_waf.Test_waf_services#test03_synchronization_waf", "labels": [{"name": "feature", "value": "waf防护模块"}, {"name": "tag", "value": "run(order=3)"}, {"name": "tag", "value": "test_waf"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_waf"}, {"name": "subSuite", "value": "Test_waf_services"}, {"name": "host", "value": "oyc"}, {"name": "thread", "value": "18500-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_waf"}]}